// <auto-generated />
using System;
using HomeAPI.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeAPI.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220219191048_AddAccounting")]
    partial class AddAccounting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("accountingCategories");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("TimePeriod")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("accountingEntries");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("accountingItems");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("accountingSubCategories");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingSubEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("accountingSubEntries");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Lighting.LightScene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LightScenes");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.News.NewsFeedSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsFeedSubscriptions");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingEntry", b =>
                {
                    b.HasOne("HomeAPI.Backend.Models.Accounting.AccountingItem", "Item")
                        .WithMany("Entries")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingItem", b =>
                {
                    b.HasOne("HomeAPI.Backend.Models.Accounting.AccountingSubCategory", "SubCategory")
                        .WithMany("Items")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingSubCategory", b =>
                {
                    b.HasOne("HomeAPI.Backend.Models.Accounting.AccountingCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingSubEntry", b =>
                {
                    b.HasOne("HomeAPI.Backend.Models.Accounting.AccountingEntry", "Entry")
                        .WithMany("SubEntries")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingEntry", b =>
                {
                    b.Navigation("SubEntries");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingItem", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("HomeAPI.Backend.Models.Accounting.AccountingSubCategory", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
